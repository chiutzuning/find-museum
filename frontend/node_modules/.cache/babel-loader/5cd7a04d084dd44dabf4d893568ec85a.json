{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport const MapContext = React.createContext(null);\nconst defaultProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n  // Style\n  mapStyle: {\n    version: 8,\n    sources: {},\n    layers: []\n  },\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n  // Callbacks\n  onError: e => console.error(e.error),\n  // Globals\n  RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\nconst Map = forwardRef((props, ref) => {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState(null);\n  const containerRef = useRef();\n  const {\n    current: contextValue\n  } = useRef({\n    mapLib: null,\n    map: null\n  });\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n    Promise.resolve(mapLib || import('mapbox-gl')).then(mapboxgl => {\n      if (!isMounted) {\n        return;\n      }\n\n      if (!mapboxgl.Map) {\n        // commonjs style\n        mapboxgl = mapboxgl.default;\n      }\n\n      if (!mapboxgl || !mapboxgl.Map) {\n        throw new Error('Invalid mapLib');\n      }\n\n      if (mapboxgl.supported(props)) {\n        setGlobals(mapboxgl, props);\n\n        if (props.reuseMaps) {\n          mapbox = Mapbox.reuse(props, containerRef.current);\n        }\n\n        if (!mapbox) {\n          mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n        }\n\n        contextValue.map = createRef(mapbox, mapboxgl);\n        contextValue.mapLib = mapboxgl;\n        setMapInstance(mapbox);\n        mountedMapsContext?.onMapMount(contextValue.map, props.id);\n      } else {\n        throw new Error('Map is not supported by this browser');\n      }\n    }).catch(error => {\n      props.onError({\n        type: 'error',\n        target: null,\n        originalEvent: null,\n        error\n      });\n    });\n    return () => {\n      isMounted = false;\n\n      if (mapbox) {\n        mountedMapsContext?.onMapUnmount(props.id);\n\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n  useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n  const style = useMemo(() => ({\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    ...props.style\n  }), [props.style]);\n  return React.createElement(\"div\", {\n    id: props.id,\n    ref: containerRef,\n    style: style\n  }, mapInstance && React.createElement(MapContext.Provider, {\n    value: contextValue\n  }, props.children));\n});\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\nexport default Map;","map":{"version":3,"sources":["/Users/genie/code/chiutzuning/find-museum-app/frontend/node_modules/react-map-gl/dist/esm/components/map.js"],"names":["React","useState","useRef","useEffect","useContext","useMemo","forwardRef","useImperativeHandle","MountedMapsContext","Mapbox","createRef","useIsomorphicLayoutEffect","setGlobals","MapContext","createContext","defaultProps","minZoom","maxZoom","minPitch","maxPitch","scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch","mapStyle","version","sources","layers","styleDiffing","projection","renderWorldCopies","onError","e","console","error","RTLTextPlugin","Map","props","ref","mountedMapsContext","mapInstance","setMapInstance","containerRef","current","contextValue","mapLib","map","isMounted","mapbox","Promise","resolve","then","mapboxgl","default","Error","supported","reuseMaps","reuse","onMapMount","id","catch","type","target","originalEvent","onMapUnmount","recycle","destroy","setProps","style","position","width","height","createElement","Provider","value","children","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport const MapContext = React.createContext(null);\nconst defaultProps = {\n    // Constraints\n    minZoom: 0,\n    maxZoom: 22,\n    minPitch: 0,\n    maxPitch: 60,\n    // Interaction handlers\n    scrollZoom: true,\n    boxZoom: true,\n    dragRotate: true,\n    dragPan: true,\n    keyboard: true,\n    doubleClickZoom: true,\n    touchZoomRotate: true,\n    touchPitch: true,\n    // Style\n    mapStyle: { version: 8, sources: {}, layers: [] },\n    styleDiffing: true,\n    projection: 'mercator',\n    renderWorldCopies: true,\n    // Callbacks\n    onError: e => console.error(e.error),\n    // Globals\n    RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\nconst Map = forwardRef((props, ref) => {\n    const mountedMapsContext = useContext(MountedMapsContext);\n    const [mapInstance, setMapInstance] = useState(null);\n    const containerRef = useRef();\n    const { current: contextValue } = useRef({ mapLib: null, map: null });\n    useEffect(() => {\n        const mapLib = props.mapLib;\n        let isMounted = true;\n        let mapbox;\n        Promise.resolve(mapLib || import('mapbox-gl'))\n            .then(mapboxgl => {\n            if (!isMounted) {\n                return;\n            }\n            if (!mapboxgl.Map) {\n                // commonjs style\n                mapboxgl = mapboxgl.default;\n            }\n            if (!mapboxgl || !mapboxgl.Map) {\n                throw new Error('Invalid mapLib');\n            }\n            if (mapboxgl.supported(props)) {\n                setGlobals(mapboxgl, props);\n                if (props.reuseMaps) {\n                    mapbox = Mapbox.reuse(props, containerRef.current);\n                }\n                if (!mapbox) {\n                    mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n                }\n                contextValue.map = createRef(mapbox, mapboxgl);\n                contextValue.mapLib = mapboxgl;\n                setMapInstance(mapbox);\n                mountedMapsContext?.onMapMount(contextValue.map, props.id);\n            }\n            else {\n                throw new Error('Map is not supported by this browser');\n            }\n        })\n            .catch(error => {\n            props.onError({\n                type: 'error',\n                target: null,\n                originalEvent: null,\n                error\n            });\n        });\n        return () => {\n            isMounted = false;\n            if (mapbox) {\n                mountedMapsContext?.onMapUnmount(props.id);\n                if (props.reuseMaps) {\n                    mapbox.recycle();\n                }\n                else {\n                    mapbox.destroy();\n                }\n            }\n        };\n    }, []);\n    useIsomorphicLayoutEffect(() => {\n        if (mapInstance) {\n            mapInstance.setProps(props);\n        }\n    });\n    useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n    const style = useMemo(() => ({\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        ...props.style\n    }), [props.style]);\n    return (React.createElement(\"div\", { id: props.id, ref: containerRef, style: style }, mapInstance && (React.createElement(MapContext.Provider, { value: contextValue }, props.children))));\n});\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\nexport default Map;\n//# sourceMappingURL=map.js.map"]},"metadata":{},"sourceType":"module"}