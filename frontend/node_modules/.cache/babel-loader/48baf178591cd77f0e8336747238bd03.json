{"ast":null,"code":"import { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\n/* eslint-disable complexity, max-statements */\n\nfunction updateLayer(map, id, props, prevProps) {\n  assert(props.id === prevProps.id, 'layer id changed');\n  assert(props.type === prevProps.type, 'layer type changed');\n\n  if (props.type === 'custom' || prevProps.type === 'custom') {\n    return;\n  }\n\n  const {\n    layout = {},\n    paint = {},\n    filter,\n    minzoom,\n    maxzoom,\n    beforeId\n  } = props;\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n\n  if (layout !== prevProps.layout) {\n    const prevLayout = prevProps.layout || {};\n\n    for (const key in layout) {\n      if (!deepEqual(layout[key], prevLayout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n\n    for (const key in prevLayout) {\n      if (!layout.hasOwnProperty(key)) {\n        map.setLayoutProperty(id, key, undefined);\n      }\n    }\n  }\n\n  if (paint !== prevProps.paint) {\n    const prevPaint = prevProps.paint || {};\n\n    for (const key in paint) {\n      if (!deepEqual(paint[key], prevPaint[key])) {\n        map.setPaintProperty(id, key, paint[key]);\n      }\n    }\n\n    for (const key in prevPaint) {\n      if (!paint.hasOwnProperty(key)) {\n        map.setPaintProperty(id, key, undefined);\n      }\n    }\n  }\n\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n}\n\nfunction createLayer(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded && map.getSource(props.source)) {\n    const options = { ...props,\n      id\n    };\n    delete options.beforeId; // @ts-ignore\n\n    map.addLayer(options, props.beforeId);\n  }\n}\n/* eslint-enable complexity, max-statements */\n\n\nlet layerCounter = 0;\n\nfunction Layer(props) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n  const id = useMemo(() => props.id || `jsx-layer-${layerCounter++}`, []);\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return () => {\n        map.off('styledata', forceUpdate); // @ts-ignore\n\n        if (map.style && map.style._loaded) {\n          map.removeLayer(id);\n        }\n      };\n    }\n\n    return undefined;\n  }, [map]); // @ts-ignore\n\n  const layer = map && map.style && map.getLayer(id);\n\n  if (layer) {\n    try {\n      updateLayer(map, id, props, propsRef.current);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n    }\n  } else {\n    createLayer(map, id, props);\n  } // Store last rendered props\n\n\n  propsRef.current = props;\n  return null;\n}\n\nexport default Layer;","map":{"version":3,"sources":["/Users/genie/code/chiutzuning/find-museum-app/frontend/node_modules/react-map-gl/dist/esm/components/layer.js"],"names":["useContext","useEffect","useMemo","useState","useRef","MapContext","assert","deepEqual","updateLayer","map","id","props","prevProps","type","layout","paint","filter","minzoom","maxzoom","beforeId","moveLayer","prevLayout","key","setLayoutProperty","hasOwnProperty","undefined","prevPaint","setPaintProperty","setFilter","setLayerZoomRange","createLayer","style","_loaded","getSource","source","options","addLayer","layerCounter","Layer","getMap","propsRef","setStyleLoaded","forceUpdate","version","on","off","removeLayer","layer","getLayer","current","error","console","warn"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\n/* eslint-disable complexity, max-statements */\nfunction updateLayer(map, id, props, prevProps) {\n    assert(props.id === prevProps.id, 'layer id changed');\n    assert(props.type === prevProps.type, 'layer type changed');\n    if (props.type === 'custom' || prevProps.type === 'custom') {\n        return;\n    }\n    const { layout = {}, paint = {}, filter, minzoom, maxzoom, beforeId } = props;\n    if (beforeId !== prevProps.beforeId) {\n        map.moveLayer(id, beforeId);\n    }\n    if (layout !== prevProps.layout) {\n        const prevLayout = prevProps.layout || {};\n        for (const key in layout) {\n            if (!deepEqual(layout[key], prevLayout[key])) {\n                map.setLayoutProperty(id, key, layout[key]);\n            }\n        }\n        for (const key in prevLayout) {\n            if (!layout.hasOwnProperty(key)) {\n                map.setLayoutProperty(id, key, undefined);\n            }\n        }\n    }\n    if (paint !== prevProps.paint) {\n        const prevPaint = prevProps.paint || {};\n        for (const key in paint) {\n            if (!deepEqual(paint[key], prevPaint[key])) {\n                map.setPaintProperty(id, key, paint[key]);\n            }\n        }\n        for (const key in prevPaint) {\n            if (!paint.hasOwnProperty(key)) {\n                map.setPaintProperty(id, key, undefined);\n            }\n        }\n    }\n    if (!deepEqual(filter, prevProps.filter)) {\n        map.setFilter(id, filter);\n    }\n    if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n        map.setLayerZoomRange(id, minzoom, maxzoom);\n    }\n}\nfunction createLayer(map, id, props) {\n    // @ts-ignore\n    if (map.style && map.style._loaded && map.getSource(props.source)) {\n        const options = { ...props, id };\n        delete options.beforeId;\n        // @ts-ignore\n        map.addLayer(options, props.beforeId);\n    }\n}\n/* eslint-enable complexity, max-statements */\nlet layerCounter = 0;\nfunction Layer(props) {\n    const map = useContext(MapContext).map.getMap();\n    const propsRef = useRef(props);\n    const [, setStyleLoaded] = useState(0);\n    const id = useMemo(() => props.id || `jsx-layer-${layerCounter++}`, []);\n    useEffect(() => {\n        if (map) {\n            const forceUpdate = () => setStyleLoaded(version => version + 1);\n            map.on('styledata', forceUpdate);\n            forceUpdate();\n            return () => {\n                map.off('styledata', forceUpdate);\n                // @ts-ignore\n                if (map.style && map.style._loaded) {\n                    map.removeLayer(id);\n                }\n            };\n        }\n        return undefined;\n    }, [map]);\n    // @ts-ignore\n    const layer = map && map.style && map.getLayer(id);\n    if (layer) {\n        try {\n            updateLayer(map, id, props, propsRef.current);\n        }\n        catch (error) {\n            console.warn(error); // eslint-disable-line\n        }\n    }\n    else {\n        createLayer(map, id, props);\n    }\n    // Store last rendered props\n    propsRef.current = props;\n    return null;\n}\nexport default Layer;\n//# sourceMappingURL=layer.js.map"]},"metadata":{},"sourceType":"module"}