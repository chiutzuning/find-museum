{"ast":null,"code":"import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n\n      return { ...currMaps,\n        [id]: map\n      };\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = { ...currMaps\n        };\n        delete nextMaps[id];\n        return nextMaps;\n      }\n\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return { ...maps,\n      current: currentMap?.map\n    };\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"sources":["/Users/genie/code/chiutzuning/find-museum-app/frontend/node_modules/react-map-gl/dist/esm/components/use-map.js"],"names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","props","maps","setMaps","onMapMount","map","id","currMaps","Error","onMapUnmount","nextMaps","createElement","Provider","value","children","useMap","currentMap","mapsWithCurrent","current"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyCC,UAAzC,QAA2D,OAA3D;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAN,CAAoB,IAApB,CAA3B;AACP,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAChC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMW,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAD,EAAyB;AAAA,QAAnBC,EAAmB,uEAAd,SAAc;AACpDH,IAAAA,OAAO,CAACI,QAAQ,IAAI;AAChB,UAAID,EAAE,KAAK,SAAX,EAAsB;AAClB,cAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACD,UAAID,QAAQ,CAACD,EAAD,CAAZ,EAAkB;AACd,cAAM,IAAIE,KAAJ,CAAW,mCAAkCF,EAAG,EAAhD,CAAN;AACH;;AACD,aAAO,EAAE,GAAGC,QAAL;AAAe,SAACD,EAAD,GAAMD;AAArB,OAAP;AACH,KARM,CAAP;AASH,GAV6B,EAU3B,EAV2B,CAA9B;AAWA,QAAMI,YAAY,GAAGf,WAAW,CAAC,YAAoB;AAAA,QAAnBY,EAAmB,uEAAd,SAAc;AACjDH,IAAAA,OAAO,CAACI,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACD,EAAD,CAAZ,EAAkB;AACd,cAAMI,QAAQ,GAAG,EAAE,GAAGH;AAAL,SAAjB;AACA,eAAOG,QAAQ,CAACJ,EAAD,CAAf;AACA,eAAOI,QAAP;AACH;;AACD,aAAOH,QAAP;AACH,KAPM,CAAP;AAQH,GAT+B,EAS7B,EAT6B,CAAhC;AAUA,SAAQf,KAAK,CAACmB,aAAN,CAAoBb,kBAAkB,CAACc,QAAvC,EAAiD;AAAEC,IAAAA,KAAK,EAAE;AAC1DX,MAAAA,IAD0D;AAE1DE,MAAAA,UAF0D;AAG1DK,MAAAA;AAH0D;AAAT,GAAjD,EAICR,KAAK,CAACa,QAJP,CAAR;AAKH,CA5BM;AA6BP,OAAO,SAASC,MAAT,GAAkB;AACrB,QAAMb,IAAI,GAAGN,UAAU,CAACE,kBAAD,CAAV,EAAgCI,IAA7C;AACA,QAAMc,UAAU,GAAGpB,UAAU,CAACC,UAAD,CAA7B;AACA,QAAMoB,eAAe,GAAGtB,OAAO,CAAC,MAAM;AAClC,WAAO,EAAE,GAAGO,IAAL;AAAWgB,MAAAA,OAAO,EAAEF,UAAU,EAAEX;AAAhC,KAAP;AACH,GAF8B,EAE5B,CAACH,IAAD,EAAOc,UAAP,CAF4B,CAA/B;AAGA,SAAOC,eAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n    const [maps, setMaps] = useState({});\n    const onMapMount = useCallback((map, id = 'default') => {\n        setMaps(currMaps => {\n            if (id === 'current') {\n                throw new Error(\"'current' cannot be used as map id\");\n            }\n            if (currMaps[id]) {\n                throw new Error(`Multiple maps with the same id: ${id}`);\n            }\n            return { ...currMaps, [id]: map };\n        });\n    }, []);\n    const onMapUnmount = useCallback((id = 'default') => {\n        setMaps(currMaps => {\n            if (currMaps[id]) {\n                const nextMaps = { ...currMaps };\n                delete nextMaps[id];\n                return nextMaps;\n            }\n            return currMaps;\n        });\n    }, []);\n    return (React.createElement(MountedMapsContext.Provider, { value: {\n            maps,\n            onMapMount,\n            onMapUnmount\n        } }, props.children));\n};\nexport function useMap() {\n    const maps = useContext(MountedMapsContext)?.maps;\n    const currentMap = useContext(MapContext);\n    const mapsWithCurrent = useMemo(() => {\n        return { ...maps, current: currentMap?.map };\n    }, [maps, currentMap]);\n    return mapsWithCurrent;\n}\n//# sourceMappingURL=use-map.js.map"]},"metadata":{},"sourceType":"module"}